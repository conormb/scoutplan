#search_results
  div
    .flex.flex-row.justify-between.p-2.hidden
      div
        = f.radio_button :recipients, :member_cohort
        = f.label :recipient_member_cohort, "Members", class: "ml-2"

      div

    fieldset.dependent-fieldset(data-dependee-id="#message_recipients_member_cohort")
      // ACTIVE MEMBERS
      .flex.flex-row.justify-between.p-2
        div
          = check_box_tag "member_cohort[active]",
            :active,
            true,
            data: { adult_count: @unit.members.status_active.adult.count,
                    youth_count: @unit.members.status_active.youth.count },
            class: "countable"

          = label_tag :member_cohort_active, "Active Members", class: "ml-2"

        div.rounded.bg-stone-100.text-stone-700.p-1.text-xs.font-bold.tracking-wider
            = "#{@unit.members.status_active.count}"

      // FRIENDS & FAMILY
      .flex.flex-row.justify-between.p-2
        div
          = check_box_tag "member_cohort[family_and_friends]",
            :family_and_friends,
            false,
            data: { adult_count: @unit.members.status_registered.adult.count,
                    youth_count: @unit.members.status_registered.youth.count },
            class: "countable"

          = label_tag :member_cohort_family_and_friends, "Family & Friends", class: "ml-2"

        div.rounded.bg-stone-100.text-stone-700.p-1.text-xs.font-bold.tracking-wider
          = "#{@unit.members.status_registered.count}"

    hr

    // EVENTS
    - @unit.events.published.recent_and_future.rsvp_required.each do |event|
      .flex.flex-row.justify-between.p-2
        div
          = f.radio_button :recipients,
            "event_#{event.id}_attendees",
            data: { adult_count: event.rsvps.accepted.select { |r| r.member.adult? }.count,
                    youth_count: event.rsvps.accepted.select { |r| r.member.youth? }.count },
            class: "countable"                

          = f.label "recipients_event_#{event.id}_attendees", "#{event.title} Attendees", class: "ml-2"

        div
          .inline-block.text-xs
            - if event.starts_at.future?
              = " (#{distance_of_time_in_words_to_now(event.starts_at)} from now)"
            - else
              = " (#{distance_of_time_in_words_to_now(event.starts_at)} ago)"

          .inline-block.rounded.bg-stone-100.text-stone-700.p-1.text-xs.font-bold.tracking-wider.ml-2
            = "#{event.rsvps.accepted.count}"

javascript:



  // Iterate over all dependent fieldsets and see if their corresponding dependee elements
  // are selected. If not, then deselect all inputs in the fieldset
  function deselectDependentFieldsets() {
    document.querySelectorAll(".dependent-fieldset").forEach(function(fieldsetElem) {
      var dependeeElem = findFieldsetDependee(fieldsetElem);
      if (dependeeElem.checked) { return; }

      deselectFieldset(fieldsetElem);
    });
  }  

  // given a fieldset, return the input it depends on
  function findFieldsetDependee(fieldsetElem) {
    var dependeeId = fieldsetElem.dataset.dependeeId;
    return document.querySelector(dependeeId);
  }

  // deselect all checkboxes in a given fieldset
  function deselectFieldset(fieldsetElem) {
    fieldsetElem.querySelectorAll("input").forEach(function(elem) {
      elem.checked = false;
    });
  }

  // dependent fieldsets contain inputs whose values are linked to another "parent" input value,
  // forming nested input structures. This block sets up the event handlers for them.
  function selectDependee(event) {
    if (!event.target.checked) { return; }

    var fieldsetElem = event.target.closest(".dependent-fieldset");
    var dependeeElem = findFieldsetDependee(fieldsetElem);
    dependeeElem.checked = true;
  }  

  function renderRecipientCount() {
    var countElem = document.querySelector("#recipient_count");
    var memberType = document.querySelector("input[name='member_type']:checked").value;
    var count = 0;
    document.querySelectorAll("input.countable:checked").forEach(function(elem) {
      count = count + (parseInt(elem?.dataset?.adultCount) || 0);
      if (memberType == "youth_and_adults") {
        count = count + (parseInt(elem?.dataset?.youthCount) || 0);
      }
    });

    countElem.innerText = `${count} recipient(s)`;
  }

  // called whenever a recipient <input> is clicked
  function searchResultClick(event) {
    var inputElem = event.target;
    if (inputElem.closest(".dependent-fieldset")) {
      selectDependee(event);
    } else {
      deselectDependentFieldsets();
    }
    renderRecipientList();
    renderRecipientCount();
    hideSearchResults();
  }

  function hideSearchResults() {
    document.querySelector("#search_results").closest(".dropdown").classList.remove("menu-open");
  }

  // given an input, find its corresponding label
  function labelForInput(inputElem) {
    var inputElemId = inputElem.id;
    var selector = `label[for="${inputElemId}"]`;
    var labelElem = document.querySelector(selector);
    return labelElem;
  }

  // given an input, return the text of its corresponding label
  function labelTextForInput(inputElem) {
    var labelElem = labelForInput(inputElem);
    var result = labelElem?.innerText;
    return result;
  }

  // figure out who's selected and display it in the text field
  function renderRecipientList() {
    var selectedDemographicGroupElem = document.querySelector("input[name='cohort']:checked");
    var childSelector = "input.countable:checked";
    var textFieldElem = document.querySelector("#direct_recipients");
    var results = [];
    
    document.querySelectorAll(childSelector).forEach(function(elem) {
      // if (elem.checked) {
        results.push(labelTextForInput(elem));
      // }
    });
    
    resultText = results.join(", ");

    if (resultText.length > 0) {
      textFieldElem.value = resultText;
      gValidRecipient = true;
    } else {
      textFieldElem.value = "Select one or more recipient groups";
      gValidRecipient = false;
    }
  }  

  window.addEventListener("load", function() {
    // set up listeners on all <input> tags
    document.querySelectorAll("#search_results input").forEach(function(elem) {
      elem.addEventListener("click", function(event) {
        searchResultClick(event);
      });
    });

    // set up listener on All/Adults Only radios
    document.querySelectorAll("input[name='member_type']").forEach(function(elem) {
      elem.addEventListener("click", function(event) {
        renderRecipientCount();
      })
    });

    // populate the UI
    renderRecipientCount();
    renderRecipientList();
  });