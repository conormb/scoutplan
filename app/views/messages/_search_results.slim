div#recipient_groups
  = radio_button_tag :cohort, :demographic, true, data: { child_class: ".demographic-group-item" }
  = label_tag :cohort_demographic, "Demographic Groups"

  div.ml-6
    = check_box_tag "demographic_cohorts[active_youth]", "active_youth", true, class: "displayable cohort-selection demographic-group-item", data: { cohort: "demographic", depends_on: "#cohort_demographic" }
    = label_tag :demographic_cohorts_active_youth, "Active Youth"

    br
    = check_box_tag "demographic_cohorts[active_adults]", "active_adults", true, class: "displayable cohort-selection demographic-group-item", data: { cohort: "demographic", depends_on: "#cohort_demographic" }
    = label_tag :demographic_cohorts_active_adults, "Active Adults"

    br
    = check_box_tag "demographic_cohorts[family_and_friends]", "family_and_friends", false, class: "displayable cohort-selection demographic-group-item", data: { cohort: "demographic", depends_on: "#cohort_demographic" }
    = label_tag :demographic_cohorts_family_and_friends, "Family & Friends"

    br
    = check_box_tag "demographic_cohorts[digest]", "digest", true, class: "displayable cohort-selection demographic-group-item", data: { cohort: "demographic", depends_on: "#cohort_demographic" }
    = label_tag :demographic_cohorts_digest, "Weekly Digest"

  hr

  - @unit.events.published.recent_and_future.rsvp_required.each do |event|
    = radio_button_tag :cohort, "event_#{event.id}", false, class: "displayable event-cohort-item"
    = label_tag "cohort_event_#{event.id}", "#{event.title} Attendees"
    br


ul#search_results
  li
    = link_to "#",
      class: "demographic-cohort block px-4 py-2 hover:bg-stone-200 cursor-pointer",
      data: { form_target: "#demographic_cohorts_active_youth" } do

      .flex.flex-row.justify-between
        div
          .inline-block.w-8.text-center.mr-2
            i.fa-check.fas.text-green-500.selected-icon
            i.fa-users.fas.text-brand-400.deselected-icon.hidden
          = "Active Youth"

        div.rounded.bg-stone-100.text-stone-700.p-1.text-xs.font-bold.tracking-wider
          = "#{@unit.members.youth.status_active.count}"

  li
    = link_to "#",
      class: "demographic-cohort block px-4 py-2 hover:bg-stone-200 cursor-pointer",
      data: { form_target: "#demographic_cohorts_active_adults" } do

      .flex.flex-row.justify-between
        div
          .inline-block.w-8.text-center.mr-2
            i.fa-check.fas.text-green-500.selected-icon
            i.fa-users.fas.text-brand-400.deselected-icon.hidden
          = "Active Adults"

        div.rounded.bg-stone-100.text-stone-700.p-1.text-xs.font-bold.tracking-wider
          = "#{@unit.members.adult.status_active.count}"

  li
    = link_to "#",
      class: "demographic-cohort block px-4 py-2 hover:bg-stone-200 cursor-pointer",
      data: { form_target: "#demographic_cohorts_family_and_friends" } do

      .flex.flex-row.justify-between
        div
          .inline-block.w-8.text-center.mr-2
            i.fa-check.fas.text-green-500.selected-icon.hidden
            i.fa-users.fas.text-brand-400.deselected-icon
          = "Family & Friends"              

        div.rounded.bg-stone-100.text-stone-700.p-1.text-xs.font-bold.tracking-wider
          = "#{@unit.members.status_registered.count}"
  
  hr

  li
    = link_to "#",
      class: "block px-4 py-2 hover:bg-stone-200 cursor-pointer",
      data: { form_target: "#demographic_cohorts_digest" } do

      .flex.flex-row.justify-between
        div
          .inline-block.w-8.text-center.mr-2
            i.fa-check.fas.text-green-500.selected-icon
            i.fa-newspaper.fas.text-brand-400.deselected-icon.hidden
          = "Weekly Digest"

  hr

  // EVENTS
  - @unit.events.published.recent_and_future.rsvp_required.each do |event|
    li
      = link_to "#",
        class: "block px-4 py-2 hover:bg-stone-200 cursor-pointer",
        data: { form_target: "#cohort_event_#{event.id}" } do

        .flex.flex-row.justify-between
          div
            .inline-block.w-8.text-center.mr-2
              i.fa-check.fas.text-green-500.selected-icon.hidden
              i.fa-calendar.fas.text-brand-400.deselected-icon
            = "#{event.title} Attendees"

          div
            .inline-block.text-xs
              - if event.starts_at.future?
                = " (#{distance_of_time_in_words_to_now(event.starts_at)} from now)"
              - else
                = " (#{distance_of_time_in_words_to_now(event.starts_at)} ago)"

            .inline-block.rounded.bg-stone-100.text-stone-700.p-1.text-xs.font-bold.tracking-wider.ml-2
              = "#{event.rsvps.accepted.count}"

  - 0.times do |i|
    li
      = link_to "#",
        class: "block px-4 py-2 hover:bg-stone-200 cursor-pointer" do
        .inline-block.w-8.text-center.mr-2
          i.fa-user.fas.text-brand-400              
        = "Search result #{i + 1}"

javascript:
  document.querySelectorAll("#search_results a").forEach(function(elem) {
    elem.addEventListener("click", function(event) {
      searchResultClick(event);
      event.preventDefault();
    });
  });

  // when the user clicks an item in the dropdown, we map that onto
  // the hidden fields that'll actually get submitted
  function searchResultClick(event) {
    var formElemId = event.currentTarget.dataset?.formTarget;
    var formElem = document.querySelector(formElemId);

    switch(formElem?.type) {
      case "checkbox":
        formElem.checked = !formElem.checked;
        break;
      case "radio":
        formElem.checked = true;
        break;
      default:
        break;
    }

    if (dependsOnId = formElem.dataset?.dependsOn) {
      dependsOnElem = document.querySelector(dependsOnId);
      dependsOnElem.checked = true;
    }

    // uncheck dependent items if needed
    document.querySelectorAll("input[data-depends-on").forEach(function(elem) {
      var dependedElem = document.querySelector(elem.dataset.dependsOn);
      if (dependedElem.checked) { return; }
      
      elem.checked = false;
    });

    renderRecipientList();
    syncMenuState();
  }

  // make the dropdown menu reflect the form inputs
  function syncMenuState() {
    document.querySelectorAll("*[data-form-target]").forEach(function(elem) {
      var formTargetId = elem?.dataset?.formTarget;
      var formTargetElem = document.querySelector(formTargetId);
      var selectedIcon = elem.querySelector(".selected-icon");
      var deselectedIcon = elem.querySelector(".deselected-icon");

      if (formTargetElem?.checked) {
        selectedIcon.classList.remove("hidden");
        deselectedIcon.classList.add("hidden");
      } else {
        selectedIcon.classList.add("hidden");
        deselectedIcon.classList.remove("hidden");
      }
    });
  }

  function renderRecipientList() {
    var selectedDemographicGroupElem = document.querySelector("input[name='cohort']:checked");
    var childSelector = ".displayable";
    var textFieldElem = document.querySelector("#direct_recipients");
    var results = [];
    document.querySelectorAll(childSelector).forEach(function(elem) {
      if (elem.checked) {
        results.push(labelTextForInput(elem));
      }
    });
    
    resultText = results.join(", ");

    if (resultText.length > 0) {
      textFieldElem.value = resultText;
      gValidRecipient = true;
    } else {
      textFieldElem.value = "Select one or more recipient groups";
      gValidRecipient = false;
    }
  }

  function labelForInput(inputElem) {
    var inputElemId = inputElem.id;
    var selector = `label[for="${inputElemId}"]`;
    var labelElem = document.querySelector(selector);
    return labelElem;
  }

  function labelTextForInput(inputElem) {
    var labelElem = labelForInput(inputElem);
    var result = labelElem?.innerText;
    return result;
  }
