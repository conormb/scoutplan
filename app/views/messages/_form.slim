- recipients = [ ["Active Members (#{@unit.members.status_active.count} total, #{@unit.members.status_active.adult.count} adults)", "active_members"],
                 ["Active + Family & Friends (#{@unit.members.select{|m| !m.status_inactive?}.count} total, #{@unit.members.adult.select{|m| !m.status_inactive?}.count} adults)", "all_members"] ]

- events = @unit.events.recent.rsvp_required.published
/ - recipients << ["", nil] if events.present?

- events.each do |event|
  - recipients << ["#{event.title} Attendees — ended #{distance_of_time_in_words_to_now(event.ends_at)} ago (#{event.rsvps.accepted.count} total, #{event.rsvps.accepted.select{|r| r.member.adult?}.count} adults)", "event_#{event.id}_attendees"]

- @unit.events.published.upcoming.rsvp_required.each do |event|
  - recipients << ["#{event.title} Attendees — starts in #{distance_of_time_in_words_to_now(event.starts_at)} (#{event.rsvps.accepted.count} total, #{event.rsvps.accepted.select{|r| r.member.adult?}.count} adults)", "event_#{event.id}_attendees"]

= form_with model: @message,
            url: @message.new_record? ? unit_messages_path(@unit) : unit_message_path(@unit, @message),
            method: @message.new_record? ? "post" : "patch",
            data: { turbo_action: "advance" } do |f|

  section.flex.flex-col.gap-4
    // FROM
    div.hidden
      = f.label :from, class: "block py-1 text-sm font-bold"
      = text_field_tag :from_address,
        @unit.settings(:communication).from_email,
        disabled: true,
        class: "w-full border border-stone-200 rounded bg-white dark:bg-black p-2 placeholder-stone-400 disabled:text-stone-400 disabled:placeholder-stone-200"

    // TO
    div
      = f.label :groups, t("messages.form.labels.groups"), class: "block py-2 font-bold"
      = f.select :recipients, recipients, { }, class: "inline-block font-bold rounded border border-stone-200 w-full dark:bg-black dark:border-stone-500"

    div.py-2
      = render partial: "components/switch", locals: { checked: @message.member_type == "adults_only",
                                                        label: "Only send to adults",
                                                        object_name: "message",
                                                        method: "member_type",
                                                        checked_value: "adults_only",
                                                        unchecked_value: "youth_and_adults" }


    // DELIVERY VIA EMAIL
    div.py-2.hidden
      = render partial: "components/switch", locals: { checked: @message.deliver_via_notification,
                                                       label: "Deliver via email",
                                                       object_name: "message",
                                                       method: "deliver_via_notification",
                                                       checked_value: "true",
                                                       unchecked_value: "false" }


    // via newsletter
    div.flex.flex-row.items-center.hidden
      = render partial: "components/switch", locals: { checked: @message.deliver_via_digest,
                                                       label: "Include in weekly newsletter",
                                                       object_name: "message",
                                                       method: "deliver_via_digest",
                                                       checked_value: "true",
                                                       unchecked_value: "false" }

      #digest_fields.ml-1.inline.items-center
        = label_tag :until, "until", class: "font-bold"
        = f.date_field :pin_until, class: "ml-2 rounded border border-stone-200 "

    // SUBJECT
    div
      = f.label :subject, t("messages.form.labels.subject"), class: "block py-2 font-bold"
      = f.text_field :title,
                      autofocus: true,
                      autocomplete: "off",
                      class: "w-full border border-stone-300 rounded bg-white dark:bg-black dark:border-stone-500 p-2 placeholder-stone-300 dark:placeholder-stone-500 disabled:text-stone-300 disabled:placeholder-stone-200",
                      placeholder: t("messages.form.placeholders.subject")

    // BODY
    div
      = f.rich_text_area :body, class: "bg-white dark:bg-black overflow-auto h-48 border border-stone-300 dark:border-stone-500 dark:placeholder-stone-500", placeholder: "Type your message..."

    // SEND LATER
    .mt-4
      = f.label :send_at, t("messages.form.labels.dont_sent_until")
      = f.date_field :send_at, class: "rounded border-stone-200 ml-2"


    footer.border-t.py-4.dark:border-stone-500
      - unless MessagePolicy.new(@current_member, @message).create?
        p.text-sm.font-bold
          i.fa-solid.fa-circle-info.mr-1
          | Your message will be sent to unit leadership for approval before being sent.

      .flex.flex-col.md:flex-row.mt-4.justify-between.mb-2.bottom-0.sticky

        - submit_caption = MessagePolicy.new(@current_member, @message).create? ? t("messages.captions.send_message") : "Submit for Approval"

        // LEFT SIDE
        div
          = f.button submit_caption,
                    type: "submit",
                    name: "commit",
                    value: t("messages.captions.send_message"),
                    class: "inline-block px-4 py-2 font-bold text-white bg-lime-600 disabled:bg-lime-100 rounded",
                    id: "send_message_button"    
        
        // RIGHT SIDE
        .flex.gap-1
          = f.button t("messages.captions.save_draft"),
                    type: "submit",
                    class: "py-2 rounded uppercase text-stone-500 hover:text-stone-900 dark:hover:text-stone-300 cursor-pointer",
                    value: t("messages.captions.save_draft"),
                    name: "commit",
                    title: "Save as a draft" do
            .fa-stack
              i.fa-regular.fa-circle.fa-stack-2x
              i.fa-solid.fa-floppy-disk.fa-stack-1x

          = f.button t("messages.captions.send_preview"),
                    type: "submit",
                    title: "Send a preview to yourself",
                    value: t("messages.captions.send_preview"),
                    name: "commit",
                    class: "w-full md:w-fit py-2 text-stone-500 hover:text-stone-900 dark:hover:text-stone-300 cursor-pointer" do
            .fa-stack
              i.fa-regular.fa-circle.fa-stack-2x
              i.fa-solid.fa-paper-plane.fa-stack-1x

          - unless @message.new_record?
            = f.button t("messages.captions.delete_draft"),
                      type: "submit",
                      title: "Delete this draft",
                      value: t("messages.captions.delete_draft"),
                      name: "commit",
                      onclick: "return confirm('Are you sure you want to delete this draft?');",
                      class: "w-full md:w-fit py-2 text-stone-500 hover:text-stone-900 cursor-pointer" do
              .fa-stack
                i.fa-regular.fa-circle.fa-stack-2x
                i.fa-solid.fa-trash.fa-stack-1x

- unless @message.new_record?
  - service = MessageService.new(@message)
  h3.font-bold Recipients
  ol
    - service.resolve_members.each do |member|
      li = member.full_display_name


javascript:
  document.querySelectorAll(".delivery-method-checkbox").forEach(function(elem) {
    elem.addEventListener("click", function(event) {
      validateForm();
    });
  });

  function validateForm() {
    var formValid = true;

    var deliveryMethodsContainer = document.querySelector("#delivery_methods_container");
    var deliveryMethodCount = deliveryMethodsContainer.querySelectorAll("input:checked").length;
    formValid = formValid && (deliveryMethodCount > 0);

    var sendMessageButton = document.querySelector("#send_message_button");
    sendMessageButton.disabled = !formValid;
  }
