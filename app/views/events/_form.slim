.modal.fade#newEventModal
  .modal-dialog
    .modal-content
      = form_for [@unit, @event] do |f|
        .modal-header
          h5.modal-title = t(:event_add)
          button.btn-close(type="button" data-bs-dismiss="modal")
        .modal-body
          .mb-3
            = f.label :category, class: 'col-form-label'
            = f.select :event_category_id, @unit.event_categories.collect { |c| [ c.name, c.id] }, {prompt: t('event_category_prompt')}, {class: 'form-select'}

          .mb-3
            = f.label :title
            = f.text_field :title, class: 'form-control'

          // from date
          .mb-3
            .row.mb-3
              .col-sm-2
                = f.label :from
              .col-sm-5
                = date_field '', :starts_at_d, value: @event.starts_at.strftime('%Y-%m-%d'), class: 'form-control'

              .col-sm-5
                = time_field '', :starts_at_t, value: @event.starts_at.strftime('%H:%M:%S'), class: 'form-control', step: '900'

          // to date
          .mb-3
            .row.mb-3
              .col-sm-2
                = f.label :to
              .col-sm-5
                 = date_field '', :ends_at_d, value: @event.starts_at.strftime('%Y-%m-%d'), class: 'form-control'
              .col-sm-5
                 = time_field '', :ends_at_t, value: @event.ends_at.strftime('%H:%M:%S'), class: 'form-control', step: '900'

          // repeats
          .row.mb-3(style="height:3rem;")
            .col-md-6
              .form-check.form-check-inline(style="padding-top:6px;")
                = check_box_tag 'event_repeats', nil, false, class: 'form-check-input', data: { 'bs-toggle' => 'collapse', 'bs-target' => '#repeat-fields'}, onclick: 'updateRepeatLabel(this);'
                = f.label :repeats, class: 'form-check-label', id: 'repeat-label'

            .col-md-5
              .collapse#repeat-fields.input-group
                = date_field '', :repeats_until, value: (@event.starts_at + 6.months).strftime('%m/%d/%Y'), class: 'form-control'
                button.btn.btn-outline-secondary(type="button")
                  i.fas.fa-calendar

          // location
          .mb-3
            = f.label :location
            = f.text_field :location, class: 'form-control'

          // description
          .mb-3
            = f.label :description
            = f.text_field :description, class: 'form-control'

          // RSVP
          .form-check.mb-3
            = f.check_box :requires_rsvp, class: 'form-check-input', data: { 'bs-toggle' => 'collapse', 'bs-target' => '#rsvp-fields'}
            = f.label :requires_rsvp, class: 'form-check-label'

          // RSVP fields
          .mb-3.collapse#rsvp-fields(style="padding-left: 24px;")
            .mb-3
              label
                | RSVP opens&nbsp;
                a(href="#") immediately
                | &nbsp;and closes&nbsp;
                a(href="#") 2 weeks before start

            .form-check.mb-3
              = check_box_tag 'rsvp_notify', '', false, class: 'form-check-input'
              = label_tag :rvsp_notify, t('helpers.label.event.rsvp_notify'), class: 'form-check-label'

        // form buttons
        .modal-footer.justify-content-between
          - if @event.new_record?
            = f.submit t('helpers.label.event.accept_button'), class: 'btn btn-primary', id: 'event_submit'
            button.btn.btn-secondary(type="button" data-bs-dismiss="modal") = t('helpers.label.event.cancel_button')

          - else # updating an existing record
            // cancel event
            - if @event.starts_at.future?
              button(type="button" class="btn btn-outline-danger") =t ('helpers.label.event.cancel_event')

            span
              // update
              = f.submit t('helpers.label.event.update_button'), class: 'btn btn-primary', id: 'event_submit', style: 'margin-right: 10px;'

              // don't update
              button.btn.btn-secondary(type="button" data-bs-dismiss="modal") = t('helpers.label.event.cancel_update')

javascript:
  setupDialog();

  function setupDialog() {
    const catDropDown = document.getElementById('event_event_category_id');
    catDropDown.addEventListener('change', function() {
      handleCategoryChange(this);
    });

    // setupDateValidations();
    // setupTimeValidations();

    validateDialog();
  }


  // function setupDateValidations() {
  //   const dateFields = document.getElementsByClassName('validated-date');
  //   for(const dateField of dateFields) {
  //     dateField.addEventListener('focusin', function() {
  //       this.setAttribute('data-val', this.value);
  //     });
  //     dateField.addEventListener('change', function() {
  //       if(!validateDate(this)) {
  //         this.value = this.getAttribute('data-val'); // restore original value
  //       }
  //     });
  //   }
  // }

  // function setupTimeValidations() {
  //   const dateFields = document.getElementsByClassName('validated-time');
  //   for(const dateField of dateFields) {
  //     dateField.addEventListener('focusin', function() {

  //     });
  //     dateField.addEventListener('change', function() {

  //     });
  //   }
  // }

  // when the category is changed, change the Event Title to default to the
  // new category name
  // TODO: suppress if user has already explicitly set Event Title prior
  function handleCategoryChange(dropdown) {
    const catId = dropdown.value;
    const catName = dropdown.options[dropdown.selectedIndex].text;
    const eventTitle = document.getElementById('event_title');
    eventTitle.value = catName;

    validateDialog();
  }

  // enable / disable Accept button depending on validation status
  function validateDialog() {
    var valid = false;
    const categoryId = document.getElementById('event_event_category_id').value;
    if(!!categoryId) {
      valid = true;
    }

    const commitButton = document.getElementById('event_submit');
    commitButton.disabled = !valid;
  }

  // when the Repeat box is checked, the caption should update
  function updateRepeatLabel(elem) {
    const label = document.getElementById('repeat-label');
    const checkBox = document.getElementById('event_repeats');
    const caption = checkBox.checked ? 'Repeats weekly until' : 'Repeats weekly';
    label.innerText = caption;
  }

scss:
  #calendar {
    background: #eee;
    position: absolute;
    display: 'block';
    left: 0;
    top: 0;
    font-size: 80%;
  }

  #calendar table {
    display: block;
    margin: 15px;
  }

  #calendar {
    .sp-cal-wrapper {
      display: inline-block;
      width: 50%;
    }

    .sp-cal-wrapper:first-child {
      padding-right: 12px;
    }

    .sp-cal-wrapper:last-child {
      padding-left: 12px;
    }

    th, td {
      text-align: center;
      padding: 0;
    }

    td {
      pointer: hand;
    }
  }

  .sp-cal-day {
    a {
      display: inline-block;
      padding: 4px;
      border-radius: 50%;
      pointer: default;
      width: 100%;
      text-decoration: none;
      color: #333;

      &:hover {
        background-color: #ddd;
      }
    }
  }
