= turbo_frame_tag "main"
  .mx-auto.max-w-xl.py-8
    = form_with model: @event, url: unit_event_cancel_path(@unit, @event), method: :post, data: { turbo_action: "advance" } do |f|
      header.sticky.top-0.pb-4
        h1.font-bold.text-2xl Cancel Event

        - if @event.past?
          p.bg-yellow-300.text-yellow-800.p-4.mt-2.rounded
            i.fa-exclamation-triangle.fas.mr-2
            = t("events.cancel.past_warning")

      section
        p.mb-4
          = raw("You are cancelling the <strong>#{@event.title}</strong> on ")
          span.whitespace-nowrap.font-bold
            = @event.starts_at.strftime("%B %-d")
          |.&nbsp

          - if !@event.requires_rsvp
            = "No RSVP was required."
          - elsif @event.rsvps.accepted.count.positive?
            = "There are #{@event.rsvps.accepted.count} members planning to attend"

            - if @event.rsvps.declined.count.positive?
              = " and #{@event.rsvps.declined.count} who declined"

            = "."
          - else
            = "No one is planning to attend."

        p.mb-4
          = t("events.cancel.message_prompt")
        
        .mb-1
          = f.radio_button :message_audience, :none, class: "mr-2"
          = f.label :message_audience_none, "No, don't send a message"

        - if @event.rsvps?
          .mb-1
            = f.radio_button :message_audience, :acceptors, class: "mr-2"
            = f.label :message_audience_acceptors, "Yes, to the #{@event.rsvps.accepted.count} who plan on attending"

        .mb-1
          = f.radio_button :message_audience, :active_members, class: "mr-2", checked: true
          = f.label :message_audience_active_members, "Yes, to all #{@unit.members.contactable.status_active.count} active, contactable members"

        .mb-3
          = f.radio_button :message_audience, :all_members, class: "mr-2"
          = f.label :message_audience_all_members, "Yes, to all #{@unit.members.contactable.count} registered, contactable members"

        = f.text_area :note,
          class: "border rounded w-full h-24 p-2 placholder-stone-300 border-stone-500",
          autofocus: true,
          placeholder: t("events.placeholders.cancellation_message")

      // footer, containing right-justified buttons
      footer.py-4.sticky.bottom-0.flex.gap-2.flex-col.md:flex-row.md:justify-end
          // Do Cancel button
          = f.submit t("events.cancel.proceed"),
            class: "text-sm font-bold tracking-wider uppercase no-underline  \
                    inline-block px-4 py-2 \
                    bg-red-600 hover:bg-red-700 \
                    text-red-100 hover:text-red-200 \
                    w-full md:w-fit rounded cursor-pointer",
            data: { confirm: t("events.cancel.confirm") },
            onclick: "return confirm('Are you sure you want to cancel this event?');"
            
          // Don't Cancel button
          = link_to t("events.cancel.abandon"),
            unit_event_path(@unit, @event),
            class: "text-black text-sm font-bold text-center \
                    no-underline px-4 py-2  bg-gray-200 hover:bg-gray-300 rounded  tracking-wider uppercase \
                    inline-block w-full md:w-fit",
            data: { turbo_frame: "main", turbo_action: "advance" }

= render partial: "events/partials/styles"

css:
  textarea::placeholder {
    color: #D6D3D1;
    opacity: 1;
  }

javascript:
  function setupNoteField() {
    var messageAudience = document.querySelector("input[name='event[message_audience]']:checked").value;
    var noteField = document.querySelector("#event_note");
    noteField.style.display = (messageAudience == "none") ? "none" : "block";
  }

  document.addEventListener("DOMContentLoaded", function() {
    document.querySelectorAll("input[type='radio']").forEach(function(elem) {
      elem.addEventListener("click", function(elem) {
        console.log("CLICK!");
        setupNoteField();
      });
    });
  });