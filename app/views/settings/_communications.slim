.h-4

= render partial: "back_to_settings"

header.mb-6
  h1.font-bold.text-4xl.mb-1
    = t("settings.titles.communications")

  p.text-lg
    | Scoutplan can automatically send messages via email and SMS (your members choose) at regular intervals. 
    | Choose the types of messages you want to send.

= form_with model: @unit do |f|
  fieldset.divide-y
    article.py-4
      - enabled = @unit.tasks.exists?(key: "daily_reminder")

      h2.font-bold.text-xl
        i.fa-solid.fa-sun.mr-2.text-yellow-600
        = t("settings.titles.daily_reminder")

      p.text-md.text-stone-600.mb-3
        | Send a reminder message the evening before a morning event
        | ; send a message in the morning an event later the same day.

      = render partial: "components/switch", locals: { checked: enabled,
                                                       label: t("settings.labels.digest"),
                                                       object_name: "settings[communication]",
                                                       method: "daily_reminder" }

      - if enabled && (task = @unit.tasks.find_by(key: "digest")).present?
        .h-2
        p.text-stone-400 Last ran: #{task&.last_ran_at&.strftime('%A, %b %-d') || "never"}
        p.text-sm.text-stone-400 Next run: #{task&.next_runs_at&.strftime('%A, %b %-d') || "not scheduled"}                                                 

    article.py-4
      - enabled = @unit.tasks.exists?(key: "rsvp_nag")

      h2.font-bold.text-xl
        i.fa-solid.fa-hand-point-ribbon.mr-2.text-cyan-600
        = t("settings.titles.rsvp_nag")

      p.text-md.text-stone-600.mb-3 Send a message on Tuesday mornings to members with outstanding RSVPs, gently reminding them to respond.

      = render partial: "components/switch", locals: { checked: enabled,
                                                       label: t("settings.labels.digest"),
                                                       object_name: "settings[communication]",
                                                       method: "rsvp_nag" }

      - if enabled && (task = @unit.tasks.find_by(key: "digest")).present?
        .h-2
        p.text-stone-400 Last ran: #{task&.last_ran_at&.strftime('%A, %b %-d') || "never"}
        p.text-sm.text-stone-400 Next run: #{task&.next_runs_at&.strftime('%A, %b %-d') || "not scheduled"}

    article.py-4
      - enabled = @unit.tasks.exists?(key: "digest")

      h2.font-bold.text-xl
        i.fa-solid.fa-calendar-week.mr-2.text-rose-600
        = t("settings.titles.digest")

      p.text-md.text-stone-600.mb-3 Send a message on Sunday mornings with the coming week's schedule, news, and RSVPs.

      = render partial: "components/switch", locals: { checked: enabled,
                                                       label: t("settings.labels.digest"),
                                                       object_name: "settings[communication]",
                                                       method: "digest" }

      - if enabled && (task = @unit.tasks.find_by(key: "digest")).present?
        .h-2
        p.text-stone-400 Last ran: #{task&.last_ran_at&.strftime('%A, %b %-d') || "never"}
        p.text-sm.text-stone-400 Next run: #{task&.next_runs_at&.strftime('%A, %b %-d') || "not scheduled"}

  footer.py-2
    = f.submit t("settings.buttons.save"),
              class: "rounded font-bold bg-brand-500 hover:bg-brand-600 text-white px-4 py-2"

css:
  input.switch:checked + label .switch-container {
    background: #16a34a;
  }

  .switch-button {
    transform: translateX(0);
    transition: transform 0.25s;
  }

  input.switch:checked + label .switch-button {
    transform: translateX(1.5rem);
    transition: transform 0.25s;
  }
